        IMPORT getCLayer
        IMPORT CPrintRegs
        IMPORT COSGetEnv
        IMPORT COSGenerateError
        IMPORT COSExit
        IMPORT COSFind
        IMPORT COSChangeEnvironment
        IMPORT COSWrite0
        IMPORT COSNewLine
        IMPORT COSWriteC
        IMPORT COSByte
        IMPORT COSReadLine
        IMPORT COSWriteN

        EXPORT BASICTransError
        EXPORT BASICTransHelp
        EXPORT BASICTransMessage
        EXPORT OSGetEnv
        EXPORT OSGenerateError
        EXPORT OSExit
        EXPORT OSSynchroniseCodeAreas
        EXPORT OSFind
        EXPORT OSChangeEnvironment
        EXPORT OSWriteS
        EXPORT OSNewLine
        EXPORT OSByte
        EXPORT OSReadLine
        EXPORT OSWriteC
        EXPORT OSWrite0
        EXPORT OSWriteN
        EXPORT PrintRegs
        EXPORT QuickExit

        AREA |BASIC$$Code|, CODE, READONLY, PIC

PrintRegs
        push {r0-r12,lr}
        push {r1}
        bl getCLayer
        add r12,r0,#4       ; r0 = registers array
        pop {r1}
        stmia r12!,{r1-r9}
        bl CPrintRegs
        pop {r0-r12,lr}
        mov pc,lr

OSGetEnv
        push {r3-r9,lr}
        bl COSGetEnv
        ldr r1,[r0,#4]
        ldr r2,[r0,#8]
        ldr r0,[r0]
        pop {r3-r9,lr}
        mov pc,lr

OSGenerateError
        push {r0-r9,lr}
        bl COSGenerateError
        pop {r0-r9,lr}
        mov pc,lr

OSExit
        b COSExit

OSSynchroniseCodeAreas
        mov pc,lr

OSFind
        push {r0-r9,lr}
        bl COSFind
        pop {r0-r9,lr}
        mov pc,lr

OSChangeEnvironment
        push {r4-r9,lr}
        bl COSChangeEnvironment   ; passing r0-r3 as arguments directly
        ldr r1,[r0,#4]          ; r0 is now a pointer to the register block
        ldr r2,[r0,#8]
        ldr r3,[r0,#12]
        ldr r0,[r0]
        ;bl PrintRegs
        pop {r4-r9,lr}
        mov pc,lr

OSWriteS
        push {lr}               ; Add a placeholder value.
                                ; >(invalid address) (parent lr)
        push {r0-r9}            ; >r0-r9 (invalid address) (parent lr)

        mov r0,lr               ; Start of the string
        bl COSWrite0
        str r0,[sp,#40]         ; >r0-r9 (return address) (parent lr)

        pop {r0-r9}             ; r0-r9  >(return address) (parent lr)
        pop {lr}                ; r0-r9  (return address) >(parent lr)
        pop {lr}                ; r0-r9  (return address) (parent lr) >...
        ldr pc,[sp,#-8]

BASICTransMessage
BASICTransHelp
BASICTransError
        push {r0}
        mrs r0,cpsr
        orr r0,r0,#&10000000    ; set overflow to indicate failure
        msr cpsr_f,r0
        pop {r0}
        mov pc,lr

OSNewLine
        push {r0-r9,lr}
        bl COSNewLine
        pop {r0-r9,lr}
        mov pc,lr

OSByte
        push {r3-r9,lr}
        bl COSByte
        ldr r1,[r0,#4]          ; r0 is now a pointer to the register block
        ldr r2,[r0,#8]
        ldr r0,[r0]
        pop {r3-r9,lr}
        mov pc,lr

OSReadLine
        push {r4-r9,r12,lr}
        push {r1-r3}
        bl getCLayer            ; Store r0 and get the register block address.
        pop {r1-r3}
        add r12,r0,#4
        stmia r12!,{r1-r4}      ; Store r1-r4 in the block.
        bl COSReadLine
        ldr r1,[r0,#4]          ; Retrieve r1 from the block.
        pop {r4-r9,r12,lr}
        mov pc,lr

OSWriteC
        push {r0-r9,lr}
        bl COSWriteC
        pop {r0-r9,lr}
        mov pc,lr

OSWrite0
        push {r0-r9,lr}
        bl COSWrite0
        pop {r0-r9,lr}
        mov pc,lr

OSWriteN
        push {r0-r9,lr}
        bl COSWriteN
        pop {r0-r9,lr}
        mov pc,lr


QuickExit
        bl PrintRegs
        ; syscall exit(int status)
        mov r0, #1     ; status
        mov r7, #1     ; syscall #1 (exit)
        swi #0         ; invoke syscall


        END
